input {
    tcp {
        port => 5000
    }
}

filter {
    # stip leading and trailing whitespaces
    mutate {
        strip => ["message"]
    }
  
    # drop common, non-value-add lines
    if ([message] =~ "xtbus: can0 => CAN error occured" ) { drop {} }
    if ([message] =~ "xtbus: tx for deviceId" ) { drop {} }


    # Try PU Log1
    grok {
        match => { "message" => "%{PU_PERIODIC_LOG1}"}
        patterns_dir => ["/opt/logstash/patterns"]
        add_tag => ["puplog1"]
    }
    # ... else try PU Log2
    if "_grokparsefailure" in [tags] {
        grok {
            match => { "message" => "%{PU_PERIODIC_LOG2}"}
            patterns_dir => ["/opt/logstash/patterns"]
            add_tag => ["puplog2"]
            remove_tag => [ "_grokparsefailure" ]
        }
    }
    # ... else try PU Log3
    if "_grokparsefailure" in [tags] {
        grok {
            match => { "message" => "%{PU_PERIODIC_LOG3}"}
            patterns_dir => ["/opt/logstash/patterns"]
            add_tag => ["puplog3"]
            remove_tag => [ "_grokparsefailure" ]
        }
    }


    # ... else try CI Log1
    if "_grokparsefailure" in [tags] {
        grok {
            match => { "message" => "%{CI_PERIODIC_LOG1}"}
            patterns_dir => ["/opt/logstash/patterns"]
            add_tag => ["ciplog1"]
            remove_tag => [ "_grokparsefailure" ]
        }
    }
    # ... else try CI Log2
    if "_grokparsefailure" in [tags] {
        grok {
            match => { "message" => "%{CI_PERIODIC_LOG2}"}
            patterns_dir => ["/opt/logstash/patterns"]
            add_tag => ["ciplog2"]
            remove_tag => [ "_grokparsefailure" ]
        }
    }
    # ... else try CI Log3
    if "_grokparsefailure" in [tags] {
        grok {
            match => { "message" => "%{CI_PERIODIC_LOG3}"}
            patterns_dir => ["/opt/logstash/patterns"]
            add_tag => ["ciplog3"]
            remove_tag => [ "_grokparsefailure" ]
        }
    }
    # ... else try CI Temperature
    if "_grokparsefailure" in [tags] {
        grok {
            match => { "message" => "%{CI_TEMPERATURE1}"}
            patterns_dir => ["/opt/logstash/patterns"]
            add_tag => ["citemp"]
            remove_tag => [ "_grokparsefailure" ]
        }
    }
    # ... else try the generic CI
    if "_grokparsefailure" in [tags] {
        grok {
            # define patterns_files_glob to exclude backup and temp files
            patterns_dir => [ "/usr/share/logstash/patterns" ]
            patterns_files_glob => [ "*.conf" ]
            match => { "message" => "%{CI_LOG}" }
            add_tag => [ "cilog" ]
            remove_tag => [ "_grokparsefailure" ]
        }
    }


    date {
        # "2015 Jun 01 07:56:22"
        locale => "en"
        match => ["logtime", "YYYY MMM dd HH:mm:ss", "YYYY MMM  d HH:mm:ss"]
        timezone => "Europe/Zurich"
        target => "@timestamp"
        remove_field => [ "logtime" ]
    }

    # add defaults for missing fields
    if "_grokparsefailure" not in [tags] {
        # if the source is unknown, assume it comes form the CI
        if ![source] {
            mutate { add_field => { "source" => "CI" } }
        }
        # default the log level to INFO
        if ![level] {
            mutate { add_field => { "level" => "INFO" } }
        }
    }

    # set the geo location of inverter unit rx10025878
    if [iu] == "rx10025878"
    {
        mutate {
         add_field => { "[geoip][latitude]"    => "47.216425" }
         add_field => { "[geoip][longitude]"   => "7.768917"  }
         add_field => { "[geoip][location]"    =>  [ "7.768917", "47.216425" ] }
        }
    }

    # convert the geo location to float values
    mutate {
        convert => {
            "[geoip][latitude]"    => "float"
            "[geoip][longitude]"   => "float"
            "[geoip][location]"    => "float"
        }
    }

    # keep the index small and fast by removing unused fields
    mutate {
        remove_field => [ "host", "port" ]
    }
}

output {
    if "_grokparsefailure" in [tags] {
        stdout { codec => rubydebug }
    }
    else {
        #stdout { codec => rubydebug }
        elasticsearch {
            hosts => "elasticsearch:9200"
            # use logstash's geo location template
            template_name => "location"
            template_overwrite =>  "true"
        }
    }
}

